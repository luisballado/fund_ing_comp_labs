//Hacer documentacion de la instalacion no lleva el -EF
// probar nueva instalacion para quitar el sudo

#define SCREEN_WIDTH  100
#define SCREEN_HEIGHT 60

#define RMotor OUT_C
#define LMotor OUT_A
#define SpeedSlow 10
#define SpeedFast 50

int LPOS = 0; //Posicion MotorA
int RPOS = 0; //Posicion MotorC

int umbral = 5;
float pi = 3.141592;
float theta = 0.0;

float x = 0;          //distancia recorrido eje x
float y = 0;          //distancia recorrido eje y

int Rprev,Lprev;
float DD,DL,DW,DR;

float radio = 3;      //radio ruedas
float longitud = 16;  //distancia

int SD;
int SI;

float grados_radianes(int grados){
   return (grados * (pi/180));
}

//probar con DR DL con valores fijos
task odometria(){
     float ttemp;
     while(true){
	DR = RPOS - Rprev;
     	DL = LPOS - Lprev;
	
     	if (abs(DR) < umbral && abs(DL) < umbral) continue;
	
     	DR = pi * radio * grados_radianes(DR);
     	DL = pi * radio * grados_radianes(DL);
     
	DD = ((DR+DL)/2);
     	DW = (DR-DL)/longitud;
	ttemp = theta * (180/pi);
     	x = x + (DD * Cos(ttemp))/100;
     	y = y + (DD * Sin(ttemp))/100;
	
     	theta = theta + DW;
     	Lprev = LPOS;
     	Rprev = RPOS;
     } 
}

task sigue_lineas(){
    
  int Threshold = 600;
    
  // sensor1
  SetSensorType(IN_1, IN_TYPE_LIGHT_ACTIVE);
  SetSensorMode(IN_1, IN_MODE_RAW);

  // sensor2
  SetSensorType(IN_4, IN_TYPE_LIGHT_ACTIVE);
  SetSensorMode(IN_4, IN_MODE_RAW);
  
  while (true){

    SD = SensorRaw(IN_4);
    SI = SensorRaw(IN_1);    

    
    if (SI > Threshold)
      OnFwdReg(LMotor, SpeedSlow,OUT_REGMODE_IDLE);
    else
      OnFwdReg(LMotor, SpeedFast,OUT_REGMODE_IDLE);
    
    // linea
    
    if (SD > Threshold)
      OnFwdReg(RMotor, SpeedSlow,OUT_REGMODE_IDLE);
    else
      OnFwdReg(RMotor, SpeedFast,OUT_REGMODE_IDLE);
    
  }
}

task motor_rotation(){
     while(true){ 
	LPOS = MotorRotationCount(LMotor);
	RPOS = MotorRotationCount(RMotor);
     }
}

//360 es una vuelta completa
//convertir grados a radianes
//humbral 5-10
//Sen Cos - aceptan valores en grados
task show_text(){

  string _si_,_sd_,_theta_;
  string msg1,msg2,msg3;

  while(true){
    
    _si_ = NumToStr(x); //LPOS el valor se actualiza
    _sd_ = NumToStr(y); //RPOS el valor se actualiza
    _theta_ = NumToStr(theta);
    msg1 = "X: " + _si_;
    msg2 = "Y: " + _sd_;
    msg3 = "Th: " + _theta_;
    TextOut(0,LCD_LINE1,msg1);
    TextOut(0,LCD_LINE2,msg2);
    TextOut(0,LCD_LINE8,msg3);
  }
}

//Dibujar
task make_draw(){

  int xx;
  int yy;

  ClearScreen();
  
  while(true){
	
     xx = x + 50;
     yy = y + 30;
          
     CircleOut(xx,yy,2);
     
  }
}

task main(){
  Precedes(odometria,sigue_lineas,motor_rotation,show_text,make_draw);
  //Precedes(motor_rotation,show_text,make_draw);
}